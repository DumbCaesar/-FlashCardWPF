{
  "Name": "CSharp",
  "Cards": [
    {
      "Front": "What are the basic value types in C#?",
      "Back": "int, double, float, bool, char, decimal, byte, long, short",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is the difference between string and String in C#?",
      "Back": "string is an alias for System.String. They are identical, but lowercase string is preferred by convention",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What does the 'var' keyword do in C#?",
      "Back": "It allows implicit typing where the compiler infers the type from the assigned value",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is the null-conditional operator in C#?",
      "Back": "The ?. operator, which safely accesses members only if the object is not null (e.g., obj?.Property)",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What does the ?? operator do in C#?",
      "Back": "The null-coalescing operator returns the left operand if not null, otherwise returns the right operand",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is a namespace in C#?",
      "Back": "A container that organizes code and prevents naming conflicts by grouping related classes",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is the difference between const and readonly in C#?",
      "Back": "const is compile-time constant and must be initialized at declaration. readonly can be initialized at runtime in constructor",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What are properties in C#?",
      "Back": "Members that provide a flexible mechanism to read, write, or compute private fields using get and set accessors",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is an auto-implemented property?",
      "Back": "A property where the compiler automatically creates a private backing field (e.g., public int Age { get; set; })",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What does the 'static' keyword mean for a class member?",
      "Back": "The member belongs to the class itself rather than instances, and is shared across all objects",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is a constructor in C#?",
      "Back": "A special method that is called when an object is instantiated, used to initialize object state",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is method overloading?",
      "Back": "Defining multiple methods with the same name but different parameters (different type, number, or order)",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is the 'this' keyword used for?",
      "Back": "To refer to the current instance of the class, often used to distinguish between parameters and fields",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is a List<T> in C#?",
      "Back": "A generic collection that represents a strongly-typed list of objects with dynamic size",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is string interpolation in C#?",
      "Back": "A feature using $ prefix to embed expressions inside strings (e.g., $\"Hello {name}\")",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is the difference between == and Equals() for strings?",
      "Back": "Both compare string content, but == is operator overloaded while Equals() is a method. Both work for string comparison",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is a try-catch block used for?",
      "Back": "Exception handling - try contains code that might throw an exception, catch handles the exception",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What does LINQ stand for?",
      "Back": "Language Integrated Query - provides query capabilities for collections in C#",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is the 'new' keyword used for?",
      "Back": "To create instances of classes (objects), allocating memory on the heap",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    },
    {
      "Front": "What is the difference between value types and reference types?",
      "Back": "Value types store data directly (stack), reference types store a reference to data (heap). Classes are reference types, structs are value types",
      "Interval": null,
      "EaseFactor": null,
      "NextReview": "2025-10-30T00:00:00",
      "IsNew": true
    }
  ]
}